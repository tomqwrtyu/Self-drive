// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: carJLL.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 7000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(ec51deb0fafa0673);
CAPNP_DECLARE_SCHEMA(c78a583561913ac7);

}  // namespace schemas
}  // namespace capnp

namespace cerealJLL {

struct CarControl {
  CarControl() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Actuators;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ec51deb0fafa0673, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CarControl::Actuators {
  Actuators() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c78a583561913ac7, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class CarControl::Reader {
public:
  typedef CarControl Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getEnabled() const;

  inline bool hasActuators() const;
  inline  ::cerealJLL::CarControl::Actuators::Reader getActuators() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarControl::Builder {
public:
  typedef CarControl Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getEnabled();
  inline void setEnabled(bool value);

  inline bool hasActuators();
  inline  ::cerealJLL::CarControl::Actuators::Builder getActuators();
  inline void setActuators( ::cerealJLL::CarControl::Actuators::Reader value);
  inline  ::cerealJLL::CarControl::Actuators::Builder initActuators();
  inline void adoptActuators(::capnp::Orphan< ::cerealJLL::CarControl::Actuators>&& value);
  inline ::capnp::Orphan< ::cerealJLL::CarControl::Actuators> disownActuators();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarControl::Pipeline {
public:
  typedef CarControl Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::cerealJLL::CarControl::Actuators::Pipeline getActuators();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CarControl::Actuators::Reader {
public:
  typedef Actuators Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getSteer() const;

  inline float getAccel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CarControl::Actuators::Builder {
public:
  typedef Actuators Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getSteer();
  inline void setSteer(float value);

  inline float getAccel();
  inline void setAccel(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CarControl::Actuators::Pipeline {
public:
  typedef Actuators Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool CarControl::Reader::getEnabled() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CarControl::Builder::getEnabled() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarControl::Builder::setEnabled(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CarControl::Reader::hasActuators() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CarControl::Builder::hasActuators() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::cerealJLL::CarControl::Actuators::Reader CarControl::Reader::getActuators() const {
  return ::capnp::_::PointerHelpers< ::cerealJLL::CarControl::Actuators>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::cerealJLL::CarControl::Actuators::Builder CarControl::Builder::getActuators() {
  return ::capnp::_::PointerHelpers< ::cerealJLL::CarControl::Actuators>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::cerealJLL::CarControl::Actuators::Pipeline CarControl::Pipeline::getActuators() {
  return  ::cerealJLL::CarControl::Actuators::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CarControl::Builder::setActuators( ::cerealJLL::CarControl::Actuators::Reader value) {
  ::capnp::_::PointerHelpers< ::cerealJLL::CarControl::Actuators>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::cerealJLL::CarControl::Actuators::Builder CarControl::Builder::initActuators() {
  return ::capnp::_::PointerHelpers< ::cerealJLL::CarControl::Actuators>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CarControl::Builder::adoptActuators(
    ::capnp::Orphan< ::cerealJLL::CarControl::Actuators>&& value) {
  ::capnp::_::PointerHelpers< ::cerealJLL::CarControl::Actuators>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::cerealJLL::CarControl::Actuators> CarControl::Builder::disownActuators() {
  return ::capnp::_::PointerHelpers< ::cerealJLL::CarControl::Actuators>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float CarControl::Actuators::Reader::getSteer() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float CarControl::Actuators::Builder::getSteer() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CarControl::Actuators::Builder::setSteer(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float CarControl::Actuators::Reader::getAccel() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float CarControl::Actuators::Builder::getAccel() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CarControl::Actuators::Builder::setAccel(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

}  // namespace

