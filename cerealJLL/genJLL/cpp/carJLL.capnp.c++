// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: carJLL.capnp

#include "carJLL.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<52> b_ec51deb0fafa0673 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    115,   6, 250, 250, 176, 222,  81, 236,
     13,   0,   0,   0,   1,   0,   1,   0,
     28,  60, 100, 106, 202, 174, 182, 180,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
     29,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 114,  74,  76,  76,  46,  99,
     97, 112, 110, 112,  58,  67,  97, 114,
     67, 111, 110, 116, 114, 111, 108,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    199,  58, 145,  97,  53,  88, 138, 199,
      1,   0,   0,   0,  82,   0,   0,   0,
     65,  99, 116, 117,  97, 116, 111, 114,
    115,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    101, 110,  97,  98, 108, 101, 100,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  99, 116, 117,  97, 116, 111, 114,
    115,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    199,  58, 145,  97,  53,  88, 138, 199,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ec51deb0fafa0673 = b_ec51deb0fafa0673.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ec51deb0fafa0673[] = {
  &s_c78a583561913ac7,
};
static const uint16_t m_ec51deb0fafa0673[] = {1, 0};
static const uint16_t i_ec51deb0fafa0673[] = {0, 1};
const ::capnp::_::RawSchema s_ec51deb0fafa0673 = {
  0xec51deb0fafa0673, b_ec51deb0fafa0673.words, 52, d_ec51deb0fafa0673, m_ec51deb0fafa0673,
  1, 2, i_ec51deb0fafa0673, nullptr, nullptr, { &s_ec51deb0fafa0673, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_c78a583561913ac7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    199,  58, 145,  97,  53,  88, 138, 199,
     24,   0,   0,   0,   1,   0,   1,   0,
    115,   6, 250, 250, 176, 222,  81, 236,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 114,  74,  76,  76,  46,  99,
     97, 112, 110, 112,  58,  67,  97, 114,
     67, 111, 110, 116, 114, 111, 108,  46,
     65,  99, 116, 117,  97, 116, 111, 114,
    115,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    115, 116, 101, 101, 114,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  99,  99, 101, 108,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c78a583561913ac7 = b_c78a583561913ac7.words;
#if !CAPNP_LITE
static const uint16_t m_c78a583561913ac7[] = {1, 0};
static const uint16_t i_c78a583561913ac7[] = {0, 1};
const ::capnp::_::RawSchema s_c78a583561913ac7 = {
  0xc78a583561913ac7, b_c78a583561913ac7.words, 49, nullptr, m_c78a583561913ac7,
  0, 2, i_c78a583561913ac7, nullptr, nullptr, { &s_c78a583561913ac7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace cerealJLL {

// CarControl
constexpr uint16_t CarControl::_capnpPrivate::dataWordSize;
constexpr uint16_t CarControl::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CarControl::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CarControl::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CarControl::Actuators
constexpr uint16_t CarControl::Actuators::_capnpPrivate::dataWordSize;
constexpr uint16_t CarControl::Actuators::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CarControl::Actuators::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CarControl::Actuators::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace

